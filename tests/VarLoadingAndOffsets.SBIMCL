// 32 Bit Number
var bit32 4 endvar// Create "value" as pointer to 1 byte

10 bit32 ! // Write 10 into memory addr given by "value"
bit32 @ print cr  // Read value and print the value

bit32 dup @ 10 + swap ! // Read the value and then increment it by 10 and then rewrite it
bit32 @ print cr // Print the new value

// 8 Bit Number
var bit8 1 endvar

255 bit8 !8
bit8 @8 print cr

360 bit8 !8
bit8 @8 print cr

// Pointer Arithmetic

// Crude Arrays

macro getPtr // ptr index -- ptr
    4 * +
endmacro

macro getPtrRev // ptr index -- ptr
    4 * swap 4 - swap -
endmacro

var bit20 4 20 * endvar // 4 Bytes
var bit20end 0 endvar

cr
bit20 print cr
bit20end print cr
cr

0 while dup 20 < do
    dup 1 + dup *
    over bit20 swap getPtr !
    1 +
endwhile drop

// Go through forward
0 while dup 20 < do
    bit20 over getPtr @ print 32 . 
    1 + 
endwhile drop

cr

// Go through in reverse
0 while dup 20 < do
    bit20end over getPtrRev @ print 32 .
    1 + 
endwhile drop
cr

cr
bit20 bit20end == print cr
bit20 bit20end != print cr
